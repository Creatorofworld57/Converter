{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dimu2\\\\Java\\\\SpringSecurity_1805\\\\Frontend\\\\spa\\\\src\\\\MusicContext.jsx\",\n  _s = $RefreshSig$();\n// MusicContext.js\nimport React, { createContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport audio from \"./Audio\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MusicContext = /*#__PURE__*/createContext();\nexport const MusicProvider = ({\n  children\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [counter, setCounter] = useState(152);\n  const [header, setHeader] = useState('Loading header...');\n  const [audioCounter, setAudioCounter] = useState(452);\n  const audioRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    loadCounter();\n  }, []);\n  useEffect(() => {\n    loadAudio(counter);\n  }, [counter]);\n  const loadCounter = async () => {\n    try {\n      const response = await fetch('https://localhost:8080/api/audioCount', {\n        method: 'GET'\n      });\n      const count = await response.text();\n      setAudioCounter(Number(count));\n    } catch (error) {\n      console.error('Error fetching audio count:', error);\n    }\n  };\n  const loadAudio = async counter => {\n    const audioUrl = `https://localhost:8080/api/audio/${counter}`;\n    const audioType = 'audio/mp3';\n    if (audioRef.current) {\n      const audioElement = audioRef.current;\n\n      // Удаляем все текущие source элементы\n      while (audioElement.firstChild) {\n        audioElement.removeChild(audioElement.firstChild);\n      }\n\n      // Создаем новый элемент source\n      const sourceElement = document.createElement('source');\n      sourceElement.src = audioUrl;\n      sourceElement.type = audioType;\n\n      // Добавляем новый source элемент в элемент аудио\n      audioElement.appendChild(sourceElement);\n\n      // Устанавливаем название трека (если есть)\n      try {\n        const response = await fetch(`https://localhost:8080/api/audioName/${counter}`, {\n          method: 'GET'\n        });\n        setHeader(await response.text());\n      } catch (error) {\n        console.error('Error fetching audio name:', error);\n        setHeader('Error loading header');\n      }\n\n      // Перезагружаем аудио для его воспроизведения с новым источником\n      audioElement.load();\n      audioElement.volume = 0.1;\n\n      // Воспроизводим аудио, когда оно готово\n      audioElement.oncanplaythrough = () => {\n        audioElement.play().catch(error => {\n          console.error('Error playing audio:', error);\n        });\n      };\n    }\n  };\n  const nextAudio = () => {\n    setCounter(prevCounter => prevCounter !== audioCounter ? prevCounter + 50 : prevCounter);\n  };\n  const prevAudio = () => {\n    setCounter(prevCounter => prevCounter !== 152 ? prevCounter - 50 : prevCounter);\n  };\n  const playMusic = () => {\n    audio.play();\n    setIsPlaying(true);\n  };\n  const pauseMusic = () => {\n    audio.pause();\n    setIsPlaying(false);\n  };\n  return /*#__PURE__*/_jsxDEV(MusicContext.Provider, {\n    value: {\n      isPlaying,\n      playMusic,\n      pauseMusic\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(MusicProvider, \"O2mwPzmM7PbVITwrGkykLy7ydAs=\", false, function () {\n  return [useNavigate];\n});\n_c = MusicProvider;\nvar _c;\n$RefreshReg$(_c, \"MusicProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useRef","useState","useNavigate","audio","jsxDEV","_jsxDEV","MusicContext","MusicProvider","children","_s","isPlaying","setIsPlaying","counter","setCounter","header","setHeader","audioCounter","setAudioCounter","audioRef","navigate","loadCounter","loadAudio","response","fetch","method","count","text","Number","error","console","audioUrl","audioType","current","audioElement","firstChild","removeChild","sourceElement","document","createElement","src","type","appendChild","load","volume","oncanplaythrough","play","catch","nextAudio","prevCounter","prevAudio","playMusic","pauseMusic","pause","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dimu2/Java/SpringSecurity_1805/Frontend/spa/src/MusicContext.jsx"],"sourcesContent":["// MusicContext.js\r\nimport React, {createContext, useEffect, useRef, useState} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport audio from \"./Audio\";\r\n\r\nexport const MusicContext = createContext();\r\n\r\nexport const MusicProvider = ({ children }) => {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [counter, setCounter] = useState(152);\r\n    const [header, setHeader] = useState('Loading header...');\r\n    const [audioCounter, setAudioCounter] = useState(452);\r\n    const audioRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        loadCounter();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadAudio(counter);\r\n    }, [counter]);\r\n\r\n    const loadCounter = async () => {\r\n        try {\r\n            const response = await fetch('https://localhost:8080/api/audioCount', { method: 'GET' });\r\n            const count = await response.text();\r\n            setAudioCounter(Number(count));\r\n        } catch (error) {\r\n            console.error('Error fetching audio count:', error);\r\n        }\r\n    };\r\n\r\n    const loadAudio = async (counter) => {\r\n        const audioUrl = `https://localhost:8080/api/audio/${counter}`;\r\n        const audioType = 'audio/mp3';\r\n\r\n        if (audioRef.current) {\r\n            const audioElement = audioRef.current;\r\n\r\n            // Удаляем все текущие source элементы\r\n            while (audioElement.firstChild) {\r\n                audioElement.removeChild(audioElement.firstChild);\r\n            }\r\n\r\n            // Создаем новый элемент source\r\n            const sourceElement = document.createElement('source');\r\n            sourceElement.src = audioUrl;\r\n            sourceElement.type = audioType;\r\n\r\n            // Добавляем новый source элемент в элемент аудио\r\n            audioElement.appendChild(sourceElement);\r\n\r\n            // Устанавливаем название трека (если есть)\r\n            try {\r\n                const response = await fetch(`https://localhost:8080/api/audioName/${counter}`, { method: 'GET' });\r\n                setHeader(await response.text());\r\n            } catch (error) {\r\n                console.error('Error fetching audio name:', error);\r\n                setHeader('Error loading header');\r\n            }\r\n\r\n            // Перезагружаем аудио для его воспроизведения с новым источником\r\n            audioElement.load();\r\n            audioElement.volume = 0.1;\r\n\r\n            // Воспроизводим аудио, когда оно готово\r\n            audioElement.oncanplaythrough = () => {\r\n                audioElement.play().catch(error => {\r\n                    console.error('Error playing audio:', error);\r\n                });\r\n            };\r\n        }\r\n    };\r\n\r\n    const nextAudio = () => {\r\n        setCounter((prevCounter) => ( prevCounter !== audioCounter ? prevCounter+50 : prevCounter));\r\n    };\r\n\r\n    const prevAudio = () => {\r\n        setCounter((prevCounter) => (prevCounter !== 152 ? prevCounter - 50 : prevCounter));\r\n    };\r\n\r\n    \r\n    const playMusic = () => {\r\n        audio.play();\r\n        setIsPlaying(true);\r\n    };\r\n\r\n    const pauseMusic = () => {\r\n        audio.pause();\r\n        setIsPlaying(false);\r\n    };\r\n\r\n    return (\r\n        <MusicContext.Provider value={{ isPlaying, playMusic, pauseMusic }}>\r\n            {children}\r\n        </MusicContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}